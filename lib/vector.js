// Generated by CoffeeScript 1.3.3
(function() {
  var Vector, qq, vec1, vec2, _Vector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Number.prototype.toRadian = function() {
    return (this * Math.PI) / 180;
  };

  Number.prototype.toDegrees = function() {
    return (this * 180) / Math.PI;
  };

  _Vector = (function() {

    function _Vector(x, y, z) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 0;
      }
      this.x = x;
      this.y = y;
      this.z = z;
      this.sum = 0;
    }

    return _Vector;

  })();

  Vector = (function(_super) {

    __extends(Vector, _super);

    function Vector() {
      return Vector.__super__.constructor.apply(this, arguments);
    }

    Vector.prototype.add = function(vector) {
      return [this.x += vector.x, this.y += vector.y, this.z += vector.z];
    };

    Vector.add_ang = function(vector) {
      var C, sum;
      C = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
      return sum = {
        result: C,
        ang: vector.y / C
      };
    };

    Vector.prototype.add_ang = function() {
      var C, sum;
      C = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));
      return sum = {
        result: C,
        ang: this.y / C
      };
    };

    Vector.two_vectors = function(len, sin) {
      this.next = len * Math.sin(Math.PI * sin / 180);
      this.first = len * Math.cos(Math.PI * sin / 180);
      return new Vector(this.first, this.next);
    };

    Vector.prototype.sub = function(vector) {
      return [this.x -= vector.x, this.y -= vector.y, this.z -= vector.z];
    };

    Vector.prototype.mul = function(num) {
      return [this.x *= num, this.y *= num, this.z *= num];
    };

    Vector.prototype.div = function(num) {
      if (num) {
        return [this.x /= num, this.y /= num, this.z /= num];
      }
    };

    Vector.prototype.rect_rule = function(cos) {
      var sum;
      return sum = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2) - 2 * this.x * this.y * Math.cos(cos));
    };

    Vector.prototype.length = function() {
      return this.sum = Math.sqrt(Math.pow(this.x, 2) * Math.pow(this.y, 2) * Math.pow(this.z, 2));
    };

    Vector.random = function(n) {
      var k, vector;
      if (n == null) {
        n = 10;
      }
      vector = (function() {
        var _i, _results;
        _results = [];
        for (n = _i = 1; _i <= 3; n = ++_i) {
          if (k = Math.floor(Math.random() * 10) - 1) {
            _results.push(k);
          }
        }
        return _results;
      })();
      return new Vector(vector[1], vector[2], vector[3]);
    };

    Vector.prototype.swap = function() {
      var _ref;
      return _ref = [this.y, this.x], this.x = _ref[0], this.y = _ref[1], _ref;
    };

    Vector.prototype.triple = function(vector1, vector2) {
      return this.x * vector1.y * vector2.z + this.y * vector1.z * vector2.x + this.z * vector1.x * vector2.y - this.z * vector1.y * vector2.x - this.y * vector1.x * vector2.z - this.x * vector1.z * vector2.y;
    };

    Vector.add_dict = function(vec1, vec2) {
      var key, str, value, vector1, vector2;
      for (key in vec1) {
        value = vec1[key];
        this.name1 = key;
      }
      for (key in vec2) {
        value = vec2[key];
        this.name2 = key;
      }
      vector1 = new Vector(vec1[this.name1][0], vec1[this.name1][1], vec1[this.name1][2]);
      vector2 = new Vector(vec2[this.name2][0], vec2[this.name2][1], vec2[this.name2][2]);
      str = "" + this.name1;
      this.vector = [];
      this.vector["" + this.name1 + this.name2] = vector1.add(vector2);
      return this.vector;
    };

    return Vector;

  })(_Vector);

  vec1 = {
    "a": [4, 7, 3]
  };

  vec2 = {
    "b": [2, 1, 4]
  };

  qq = Vector.add_dict(vec1, vec2);

  alert(qq["ab"]);

}).call(this);
